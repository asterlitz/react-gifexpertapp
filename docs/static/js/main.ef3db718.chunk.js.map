{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","Helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGif.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","props","useState","category","setCategory","onSubmit","e","preventDefault","trim","length","addNewCategory","type","value","onChange","target","placeholder","GifGridItem","title","url","className","src","alt","getGif","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GridGif","loading","state","setState","useEffect","then","imgs","useFetchGif","GifExpertApp","categories","setCategories","c","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAEaA,EAAc,SAACC,GACxB,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAWA,OACI,sBAAMC,SARW,SAACC,GAClBA,EAAEC,iBACCJ,EAASK,OAAOC,OAAS,IACxBR,EAAMS,eAAeP,GACrBC,EAAY,MAIhB,SACI,uBAAOO,KAAK,OAAOC,MAAOT,EAAUU,SAZnB,SAACP,GACtBF,EAAYE,EAAEQ,OAAOF,QAW+CG,YAAY,6B,QCf3EC,EAAc,SAAC,GAAgB,IAAfC,EAAc,EAAdA,MAAOC,EAAO,EAAPA,IAChC,OACI,sBAAKC,UAAU,6CAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCJHK,EAAM,uCAAG,WAAOnB,GAAP,uBAAAoB,EAAA,6DACZL,EADY,0FAC6EM,UAAUrB,GADvF,qBAECsB,MAAMP,GAFP,cAEZQ,EAFY,gBAGGA,EAAKC,OAHR,uBAGXC,EAHW,EAGXA,KACDC,EAAOD,EAAKE,KAAK,SAACC,GACpB,MAAO,CACHC,GAAID,EAAIC,GACRd,IAAKa,EAAIE,OAAOC,iBAAiBhB,IACjCD,MAAOc,EAAId,UARD,kBAWXY,GAXW,4CAAH,sDCENM,EAAU,SAAC,GAAc,IAAbhC,EAAY,EAAZA,SAErB,ECHuB,SAACA,GACxB,MAA0BD,mBAAS,CAC/B0B,KAAK,GACLQ,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAaA,OATAC,qBAAU,WACNjB,EAAOnB,GACFqC,MAAK,SAACC,GAAD,OAASH,EAAS,CACpBV,KAAMa,EACNL,SAAU,SAEpB,CAACjC,IAGIkC,EDXiBK,CAAYvC,GAA7ByB,EAAP,EAAOA,KAAMQ,EAAb,EAAaA,QACb,OACI,qCACI,6BAAKjC,IACL,4BAAIiC,GAAW,eACf,qBAAKjB,UAAU,YAAf,SAEYS,EAAKE,KAAI,SAACC,GAEN,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEX5CW,EAAe,WACxB,MAAoCzC,mBAAS,IAA7C,mBAAO0C,EAAP,KAAmBC,EAAnB,KAIA,OACI,qCACI,gDACA,cAAC,EAAD,CAAanC,eANE,SAACP,GACpB0C,EAAc,CAAC1C,GAAF,mBAAeyC,QAMxB,uBACA,6BAEQA,EAAWd,KAAI,SAACgB,EAAGd,GACf,OAAO,cAAC,EAAD,CAAkB7B,SAAU2C,GAAdd,YCJ9Be,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ef3db718.chunk.js","sourcesContent":["import React,{useState} from 'react';\n\nexport const AddCategory = (props)=>{\n    const [category, setCategory] = useState(\"\");\n    const handleTextChange = (e)=>{\n        setCategory(e.target.value);\n    }\n    const handleSubmit = (e)=>{\n        e.preventDefault();\n        if(category.trim().length > 2){\n            props.addNewCategory(category);\n            setCategory(\"\");\n        }\n    }\n    return(\n        <form onSubmit={handleSubmit}>\n            <input type=\"text\" value={category} onChange={handleTextChange} placeholder=\"Escriba una categoria\"/>\n        </form>\n    );\n}","import React from \"react\";\nexport const GifGridItem = ({title, url})=>{\n    return (\n        <div className='card animate__animated animate__backInDown'>\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    );\n}","\nexport const getGif = async (category)=>{\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=VRXV2D2n78slHCshX3sadHEnXX7AbDSZ&q=${encodeURI(category)}&limit=7`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n    const gifs = data.map( (img) => {\n        return {\n            id: img.id,\n            url: img.images.downsized_medium.url,\n            title: img.title\n        }\n    });\n    return gifs;\n}","import React from 'react';\nimport { GifGridItem } from './GifGridItem';\nimport { useFetchGif } from '../hooks/useFetchGif';\nexport const GridGif = ({category})=>{\n    \n    const {data, loading} = useFetchGif(category);\n    return (\n        <>\n            <h3>{category}</h3>\n            <p>{loading && '...loading'}</p>\n            <div className=\"card-grid\" >\n                    {\n                        data.map((img) =>\n                        {\n                            return <GifGridItem key={img.id} {...img} />\n                        })\n                    }\n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from \"react\"\nimport { getGif } from \"../Helpers/getGifs\";\nexport const useFetchGif = (category)=>{\n    const [state, setState] = useState({\n        data:[],\n        loading: true\n    })\n    useEffect(()=>{\n        getGif(category)\n            .then((imgs)=> setState({\n                data: imgs,\n                loading : false\n            }));\n    },[category]);\n\n\n    return state;\n}","import React,{useState} from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GridGif } from './components/GifGrid';\nexport const GifExpertApp = () => {\n    const [categories, setCategories] = useState([]);\n    const addNewCategory = (category)=>{\n        setCategories([category, ...categories]);\n    };\n    return (\n        <>\n            <h1>Gif expert app</h1>\n            <AddCategory addNewCategory={ addNewCategory }/>\n            <hr/>\n            <ul>\n                {\n                    categories.map((c, id)=>{\n                        return <GridGif key={id} category={c} />;\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from './GifExpertApp';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}